Firstly, I haven't heard of most of the languages/tools that have been supplied to us, this means i will go through each of the languages/tools and watch a crashcourse of them on youtube, to give me an idea of how they work. 
Vite is a build tool for JavaScript(JS). This build tool is faster than CRA, especially when the project grows in size. Vite pre-bundles the files, rather than bundling them at the end. Bundling files is the process of combining multiple files, usually JS and CSS. 
React, going over what all terms mean in React
Components - building blocks of react app, make all the visible parts, a component is a JS function that returns JSX. It doesnt do HTML markup because it isnt a HTML library
JSX - JSX can be optional, but the alternative is using createElement which can be annoying to write and keep track of. JSX is JS, can't use HTML attributes, you need to write them in the camelCase style. JSX is used over HTML with react since it can be dynamic JS by using Curly Braces
Curly Braces - Accept values like strings and numbers directly, use to make attributes dynamic, style react elements using a JS object within them
Fragments - You can only return one thing from functions in JS, and only one parents element. To get around this, you could use DIV, however that adds another element. So you can add a fragment, which is <> followed by </>.
Props - Used to pass data into another component. To make a prop, give the component you want to pass data to a name, and set it equal to some value. You can then use that prop in the component that you passed it to, prop refers to the properties of an object, that you get in the parameters of the component, to use the prop, take it from the object like a normal JS property. Custom attribute to any JS object. Anything can be passed as a prop, even other components using the children prop. Better for composition. 
Key Prop - built in prop to react, used so React can tell one component from another. A key is a unique string or number to indentify an component. 
Rendering - react does rendering for us, we can ensure that we dont cause the rendering to be infinitely expanding and crash by using the Virutal DOM. DOm stands for Document Object Model, every browser uses this to model all HTML elements. Looks like a tree. If the state changes of React, VDOM updates, React then "diffs" to compare the updated to the previous, to see what has changed, React then uses Reconciliation, to update the real DOM. 
Event Handling - React has many built in Events. THe most common are onClick, onChange, onSubmit. If we want to run a function when a button is clicked, connect a function to the button press, general JS stuff.
State - way to manage data, state is like a snapshot, it is a picture of the app at any given time, cant use JS to manage state, use special functions like useState, and useRedcuer. useState takes an argument which is the starting value of the state variable, and returns an array containing the state variable, and a function to update the state. 
Controlled Components - use state values, to have more predicable behaviouos, the value typed into the input is being put into state, and being controlled by the state variable value. Works by: user types, setValue puts what the user types into state, state is then updated, then the input reads from the state as its value. 
Hook - useState is a style of Hook, which allow us to hook into features within functions. There are 5 types of Hooks: State Hooks(useState, useReducer), Context Hooks(useContext), Ref Hooks(useRef), Effect Hooks(useEffect), Performance Hooks(useMemo, useCallback). 
Purity - purity is used to reference how React Components should work, but means more to mathematics pure. Pure react components means the same input should always return the same output, to keep it pure, only return their JSX, not change any objects or variables that existed before rendering. 
Strict Mode - Special component that tells us our mistaks as we code
Effects - if we need to do stuff that is outside the React App. like make a request to a server. Effect is code that reaches outside the React Apps, best done in event handlers. 
Ref - To reference a DOM element, you can use Ref. TO get access to a DOM element, you can use useRef. Much easier to reference the DOm element than use it the React way. 
Context - powerful way to pass prop data through apps components, many apps have nested components, to get data down multiple levels, you need to pass props through all components in the tree, context allows you to jump down the tree. You do this by creating context, (createContext()). Then you ened to wrap the providor component, so this is what the component is called then .Provider. Put data on the value prop, finally, access the data in any component using the useContext hook. 
Portals - Context for Components. allow you to move Components to any HTML element you select, perfect for components that can't be displayed properly like models, dropdowns, and tooltips. Just use createPortal function, pass the component, and pick which HTML element you want. 
Suspense - special component that helps you handle loading a component or data, helps when it takes time to load data, provides a better user experience to show a fall back component, like a spinner, to show that the data is still loading and not that nothing is happening. 
Error Boundaries - since react apps are all JS, errors that happen during rendering can completely break the app, it works as a safety net. We make an error message to supply to the user. 
